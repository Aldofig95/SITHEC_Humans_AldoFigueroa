using DAL;
using Entities;
using Entities.Models;
using Extensions;
using Microsoft.AspNetCore.Mvc;
using Microsoft.EntityFrameworkCore;
using System.ComponentModel;

namespace SITHEC_Humans_AldoFigueroa.Controllers
{
    [Route("api/[controller]")]
    [ApiController]
    public class HumanController : ControllerBase
    {
        private readonly SithecDataContext _context;
        private const string MATH_OPERATION_HEADER = "op";
        private const string MATH_OPERATION_PARAM_1 = "param1";
        private const string MATH_OPERATION_PARAM_2 = "param2";

        public HumanController(SithecDataContext context)
        {
            _context = context;
        }

        [HttpGet]
        [Route("test")]
        public IActionResult Test()
        {
            return new OkObjectResult(DateTime.Now);
        }

        [HttpGet]
        [Route("all")]
        public async Task<IActionResult> GetAllHuman()
        {
            return new OkObjectResult(await _context.Human.ToArrayAsync());
        }


        [HttpGet]
        [Route("mock")]
        public IActionResult GetAllHumanMock()
        {
            return new OkObjectResult(DbInitializer.GetHumanListMock());
        }

        [HttpGet]
        public async Task<IActionResult> GetHuman([FromQuery] int? id)
        {
            if (id == null)
            {
                return NotFound();
            }

            var human = await _context.Human.FindAsync(id.Value);

            if (human == null)
            {
                return NotFound();
            }

            return new OkObjectResult(human);
        }


        [HttpPost]
        public async Task<IActionResult> AddHuman([FromBody] Human human)
        {
            // Sets id to zero so it can be generated by identity.
            human.Id = 0;

            var res = (await _context.Human.AddAsync(human)).Entity;
            await _context.SaveChangesAsync();

            return new OkObjectResult(res);
        }

        [HttpPut]
        public async Task<IActionResult> EditHuman([FromBody] Human human)
        {
            if (human.Id == 0)
            {
                return NotFound();
            }

            var humanDb = await _context.Human.FindAsync(human.Id);

            if (humanDb == null)
            {
                return NotFound();
            }

            humanDb.Height = human.Height;
            humanDb.Age = human.Age;
            humanDb.Weight = human.Weight;
            humanDb.Gender = human.Gender;
            humanDb.Name = human.Name;

            await _context.SaveChangesAsync();

            return new OkObjectResult(humanDb);
        }

        [HttpGet]
        [Route("math")]
        public IActionResult GetOperationResult()
        {
            try
            {
                var paramOp = ControllerContext.HttpContext.Request.Headers[MATH_OPERATION_HEADER].ToString();
                var param1 = ControllerContext.HttpContext.Request.Headers[MATH_OPERATION_PARAM_1].ToString();
                var param2 = ControllerContext.HttpContext.Request.Headers[MATH_OPERATION_PARAM_2].ToString();

                return OperationResult(paramOp, param1, param2);
            }
            catch (InvalidEnumArgumentException ex)
            {
                return BadRequest($"An invalid argument was provided: {ex.Message}");
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest($"Can't divide by zero: {ex.Message}");
            }
            catch (Exception)
            {
                // Something went wrong.
                throw;
            }
        }

        [HttpPost]
        [Route("math")]
        public IActionResult PostOperationResult(MathOperationModel paramsOp)
        {
            try
            {
                return OperationResult(paramsOp.Operation, paramsOp.Value1, paramsOp.Value2);
            }
            catch (InvalidEnumArgumentException ex)
            {
                return BadRequest($"An invalid argument was provided: {ex.Message}");
            }
            catch (DivideByZeroException ex)
            {
                return BadRequest($"Can't divide by zero: {ex.Message}");
            }
            catch (Exception)
            {
                // Something went wrong.
                throw;
            }
        }

        public IActionResult OperationResult(string paramOp, string param1, string param2)
        {
            // validates that the needed headers are present.
            if (string.IsNullOrWhiteSpace(paramOp)) return UnspecifiedParameter(nameof(paramOp));
            if (string.IsNullOrWhiteSpace(param1)) return UnspecifiedParameter(nameof(param1));
            if (string.IsNullOrWhiteSpace(param2)) return UnspecifiedParameter(nameof(param2));

            var mathOp = paramOp.GetMathOperation();
            if (!decimal.TryParse(param1, out decimal value1)) return SpecificedValueCantBeParsed(param1);
            if (!decimal.TryParse(param2, out decimal value2)) return SpecificedValueCantBeParsed(param2);

            switch (mathOp)
            {
                case MathOperation.Add:
                    return new OkObjectResult(value1 + value2);
                case MathOperation.Sub:
                    return new OkObjectResult(value1 - value2);
                case MathOperation.Mul:
                    return new OkObjectResult(value1 * value2);
                case MathOperation.Div:
                    {
                        if (value2 <= 0m) throw new DivideByZeroException();
                        return new OkObjectResult(value1 / value2);
                    }
                default:
                    throw new InvalidEnumArgumentException();
            }
        }

        public BadRequestObjectResult UnspecifiedParameter(string parameterName)
        {
            return BadRequest($"The requested parameter was not specified {parameterName}");
        }

        public BadRequestObjectResult SpecificedValueCantBeParsed(string parameterName)
        {
            return BadRequest($"The specified value cannot be parsed {parameterName}");
        }
    }
}
